import tkinter as tk
from tkinter import ttk, messagebox
from bs4 import BeautifulSoup
import os
from datetime import datetime

def parse_emoji_from_file(file_path):
    """Parse emoji codes and URLs from an HTML file."""
    try:
        # 讀取檔案內容
        with open(file_path, 'r', encoding='utf-8') as f:
            html_content = f.read()
        
        # 使用BeautifulSoup解析HTML
        soup = BeautifulSoup(html_content, 'html.parser')
        
        # 初始化字典
        youtube_emojis = {}
        youtube_emoji_urls = {}
        
        # 提取所有img標籤（role="option"）
        for img in soup.find_all('img', {'role': 'option'}):
            code = img.get('aria-label', '').strip()  # Emoji代碼，如 :_museSun:
            src = img.get('src', '').strip()         # 圖片URL
            if code and src:
                # 提取檔案名稱（從URL中提取最後一部分並確保是.png）
                filename = os.path.basename(src).split('?')[0]
                if not filename.endswith('.png'):
                    filename += '.png'
                youtube_emojis[code] = filename
                youtube_emoji_urls[code] = src
        
        return youtube_emojis, youtube_emoji_urls, None
    except Exception as e:
        return {}, {}, f"解析檔案失敗：{str(e)}"

def save_emoji_list(youtube_emojis, youtube_emoji_urls, output_file=None):
    """Save emoji mappings to a file in emojis_config.py format."""
    try:
        # 如果未提供輸出檔案名稱，生成一個以時間戳為基礎的檔案名
        if output_file is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_file = f"extra_emojis_{timestamp}.txt"
        
        # 格式化為emojis_config.py的風格
        content = "# Extra emojis configuration\n"
        content += "# Generated by div_emoji_to_extra.py\n\n"
        
        content += "YOUTUBE_EMOJIS = {\n"
        for code, filename in youtube_emojis.items():
            content += f'    "{code}": "{filename}",\n'
        content += "}\n\n"
        
        content += "YOUTUBE_EMOJI_URLS = {\n"
        for code, url in youtube_emoji_urls.items():
            content += f'    "{code}": "{url}",\n'
        content += "}\n"
        
        # 儲存到檔案
        with open(output_file, "w", encoding="utf-8") as f:
            f.write(content)
        return f"Emoji列表已儲存至 {output_file}"
    except Exception as e:
        return f"儲存檔案失敗：{str(e)}"

class EmojiParserApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Div id emoji轉檔")
        self.root.geometry("600x200")
        self.root.configure(bg="#1e1e1e")

        # 樣式
        style = ttk.Style()
        style.theme_use("clam")

        # 輸入框框架
        input_frame = tk.Frame(self.root, bg="#1e1e1e")
        input_frame.pack(fill="x", padx=10, pady=10)

        # 檔案路徑輸入框
        tk.Label(input_frame, text="文件檔案名:(只限當前目錄)", bg="#1e1e1e", fg="#cdd6f4", font=("Microsoft JhengHei UI", 12)).pack(side="left")
        self.file_entry = tk.Entry(input_frame, width=20, font=("Microsoft JhengHei UI", 12))
        self.file_entry.pack(side="left", padx=5)
        self.file_entry.insert(0, "div.txt")  # 預設值

        # 確定按鈕
        self.confirm_button = tk.Button(input_frame, text="確定轉換", command=self.process_file, font=("Microsoft JhengHei UI", 12))
        self.confirm_button.pack(side="left", padx=5)

        # 結果顯示區
        self.result_text = tk.Text(self.root, wrap="word", bg="#252526", fg="white", font=("Microsoft JhengHei UI", 12), height=15)
        self.result_text.pack(fill="both", expand=True, padx=10, pady=10)
        self.result_text.config(state="disabled")

        # 滾動條
        scrollbar = ttk.Scrollbar(self.root, orient="vertical", command=self.result_text.yview)
        self.result_text.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side="right", fill="y")

    def add_result(self, message):
        """Add a message to the result text area."""
        self.result_text.config(state="normal")
        self.result_text.insert("end", f"{message}\n")
        self.result_text.config(state="disabled")
        self.result_text.yview_moveto(1)  # 滾動到最底部

    def process_file(self):
        """Process the file when the Confirm button is clicked."""
        file_path = self.file_entry.get().strip()
        if not file_path:
            messagebox.showerror("錯誤", "請輸入檔案路徑")
            self.add_result(f"錯誤：檔案 {file_path} 不存在")
            return

        if not os.path.exists(file_path):
            messagebox.showerror("錯誤", f"檔案 {file_path} 不存在")
            self.add_result(f"錯誤：檔案 {file_path} 不存在")
            return

        # 解析Emoji列表
        youtube_emojis, youtube_emoji_urls, error = parse_emoji_from_file(file_path)

        if error:
            messagebox.showerror("錯誤", error)
            self.add_result(error)
            return

        if not youtube_emojis:
            messagebox.showwarning("警告", "未找到任何Emoji")
            self.add_result("未找到任何Emoji")
            return

        # 儲存Emoji列表
        result = save_emoji_list(youtube_emojis, youtube_emoji_urls)
        #messagebox.showinfo("成功", result)
        self.add_result(result)

if __name__ == "__main__":
    root = tk.Tk()
    app = EmojiParserApp(root)
    root.mainloop()